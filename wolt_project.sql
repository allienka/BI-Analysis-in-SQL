--creating temporery tables in python
from sqlalchemy import create_engine
from mysql.connector import errorcode
import mysql.connector
    
db_data = 'mysql+pymysql://' + 'root' + ':' + '' + '@' + 'localhost' + ':3306/' \
       + 'woltdb' + '?charset=utf8mb4'

engine=create_engine(db_data)

item_df.to_sql('item_temp', engine,if_exists='replace',index=False)
item="SELECT * FROM item_temp;"
cursor.execute(item)
cursor.fetchall()
-----
purchases_df.to_sql('purchase_temp', engine,if_exists='append',index=False)
purchase="SELECT * FROM purchase_temp;"
cursor.execute(purchase)
cursor.fetchall()
------
purchase_item_df.to_sql('purchase_item_temp', engine,if_exists='replace',index=False)
purchase_item="SELECT * FROM purchase_item_temp;"
cursor.execute(purchase_item)
cursor.fetchall()

--dropping the unnamed column
ALTER TABLE `item_temp` DROP `Unnamed: 0`;
ALTER TABLE `purchase_temp` DROP `Unnamed: 0`;
ALTER TABLE `purchase_item_temp` DROP `Unnamed: 0`;

--creating tables
CREATE OR REPLACE TABLE PURCHASE (
    PURCHASE_ID varchar(20)  NOT NULL ,
    TIME_DELIVERED datetime  ,
    TIME_RECEIVED datetime  ,
    CURRENCY varchar(5)  ,
    COUNTRY varchar(20)  ,
    VENUE_ID varchar(20) 
   
);
CREATE OR REPLACE TABLE  ITEM (
    VENUE_ID varchar(20)  ,
    AVAILABLE_TIMESTAMP datetime  ,
    BRAND varchar(500)  ,
    MANUFACTURER varchar(500)  ,
    COST_PER_UNIT Float   ,
    COST_PER_UNIT_EUR Float   ,
    CURRENCY varchar(20)  ,
    APPLICABLE_TAX_PERC Float  ,
    PRODUCT_ID varchar(20)  NOT NULL ,
    ITEM_IDENTIFIER varchar(50)  ,
    EXTERNAL_ID varchar(50) 
    

);
CREATE OR REPLACE TABLE PURCHASE_ITEM (
    PRODUCT_ID varchar(20) NOT NULL ,
    PURCHASE_ID varchar(20) NOT NULL ,
    PURCHASE_COUNT int  , 
    VENUE_ID varchar(20)  ,
    BASEPRICE double(12,2) , 
    VAT_PERCENTAGE FLOAT
);
--inserting data from temporary tables to the new tables

INSERT INTO item( VENUE_ID, AVAILABLE_TIMESTAMP, BRAND, MANUFACTURER, COST_PER_UNIT, COST_PER_UNIT_EUR, CURRENCY, APPLICABLE_TAX_PERC, PRODUCT_ID, ITEM_IDENTIFIER, EXTERNAL_ID ) 
SELECT VENUE_ID, TIMESTAMP, BRAND, MANUFACTURER, COST_PER_UNIT, COST_PER_UNIT_EUR, CURRENCY, APPLICABLE_TAX_PERC, PRODUCT_ID, ITEM_IDENTIFIER, EXTERNAL_ID 
FROM item_temp 
WHERE NOT EXISTS( SELECT VENUE_ID, AVAILABLE_TIMESTAMP, BRAND, MANUFACTURER, COST_PER_UNIT, COST_PER_UNIT_EUR, CURRENCY, APPLICABLE_TAX_PERC, PRODUCT_ID, ITEM_IDENTIFIER, EXTERNAL_ID 
FROM item 
WHERE item_temp.VENUE_ID = item.VENUE_ID 
AND item_temp.TIMESTAMP = item.AVAILABLE_TIMESTAMP 
AND item_temp.BRAND = item.BRAND AND item_temp.MANUFACTURER = item.MANUFACTURER 
AND item_temp.COST_PER_UNIT = item.COST_PER_UNIT 
AND item_temp.COST_PER_UNIT_EUR = item.COST_PER_UNIT_EUR 
AND item_temp.CURRENCY = item.CURRENCY 
AND item_temp.APPLICABLE_TAX_PERC = item.APPLICABLE_TAX_PERC 
AND item_temp.PRODUCT_ID = item.PRODUCT_ID 
AND item_temp.ITEM_IDENTIFIER = item.ITEM_IDENTIFIER 
AND item_temp.EXTERNAL_ID = item.EXTERNAL_ID 
)AND PRODUCT_ID IS NOT NULL;

INSERT INTO Purchase_item( PRODUCT_ID, PURCHASE_ID, PURCHASE_COUNT, VENUE_ID , BASEPRICE, VAT_PERCENTAGE ) 
SELECT PRODUCT_ID, PURCHASE_ID, COUNT , VENUE_ID , BASEPRICE, VAT_PERCENTAGE 
FROM purchase_item_temp 
WHERE NOT EXISTS( SELECT PRODUCT_ID, PURCHASE_ID, PURCHASE_COUNT , VENUE_ID , BASEPRICE, VAT_PERCENTAGE 
FROM purchase_item 
WHERE purchase_item_temp.PRODUCT_ID=purchase_item.product_id 
AND purchase_item_temp.PURCHASE_ID=purchase_item.purchase_id 
AND purchase_item_temp.COUNT=purchase_item.PURCHASE_COUNT 
AND purchase_item_temp.VENUE_ID=purchase_item.VENUE_ID 
AND purchase_item_temp.BASEPRICE=purchase_item.BASEPRICE 
AND purchase_item_temp.VAT_PERCENTAGE=purchase_item.VAT_PERCENTAGE )
AND PRODUCT_ID IS NOT NULL AND PURCHASE_ID IS NOT NULL;

INSERT INTO purchase( PURCHASE_ID, TIME_DELIVERED, TIME_RECEIVED, CURRENCY, COUNTRY, VENUE_ID ) 
SELECT PURCHASE_ID, TIME_DELIVERED, TIME_RECEIVED, CURRENCY, COUNTRY, VENUE_ID 
FROM purchase_temp 
WHERE NOT EXISTS( SELECT PURCHASE_ID, TIME_DELIVERED, TIME_RECEIVED, CURRENCY, COUNTRY, VENUE_ID 
FROM purchase 
WHERE purchase_temp.PURCHASE_ID=purchase.PURCHASE_ID 
AND purchase_temp.TIME_DELIVERED=purchase_temp.TIME_DELIVERED 
AND purchase_temp.TIME_RECEIVED=purchase.TIME_RECEIVED 
AND purchase_temp.CURRENCY=purchase.CURRENCY 
AND purchase_temp.COUNTRY=purchase.COUNTRY 
AND purchase_temp.VENUE_ID=purchase.VENUE_ID )AND PURCHASE_ID IS NOT NULL;



--QUERIES USED TO COUNT COSTS and COSTS IN EUR

SELECT (COST_PER_UNIT_EUR*(1 + APPLICABLE_TAX_PERC ))as COST_PER_UNIT_EUR_VAT
FROM PURCHASE_ITEM AS PUI 
JOIN ITEM AS I 
ON PUI.PRODUCT_ID = I.PRODUCT_ID;

SELECT (COST_PER_UNIT*(1 + APPLICABLE_TAX_PERC ))as COST_PER_UNIT_VAT 
FROM PURCHASE_ITEM AS PUI 
JOIN ITEM AS I 
ON PUI.PRODUCT_ID = I.PRODUCT_ID;

--TOTAL COSTS

SELECT SUM(COST_PER_UNIT_VAT) as TOTAL_COSTS FROM item GROUP BY PRODUCT_ID;

SELECT SUM(COST_PER_UNIT_EUR_VAT) as TOTAL_COSTS_EUR FROM item GROUP BY PRODUCT_ID;

--PRODUCT PRICE

SELECT SUM(BASEPRICE) as TOTAL_PRODUCT_PRICE

--PRODUCT PRICES CONVERTED TO EURO

SELECT (COST_PER_UNIT_EUR/COST_PER_UNIT)as CURRENCY_RATE from ITEM

(BASEPRICE)*(COST_PER_UNIT_EUR/COST_PER_UNIT) AS PRODUCT_PRICE_EUR,

SUM((BASEPRICE)*(COST_PER_UNIT_EUR/COST_PER_UNIT)) AS TOTAL_PRODUCT_PRICE_EUR

--PRODUCT QUANTITY

SELECT PRODUCT_ID, SUM(PURCHASE_COUNT) as Product_Quantity FROM purchase_item GROUP BY PRODUCT_ID;

--CREATING VIEWS FOR TASK 1 PROFITABILITY FOR EACH PURCHASE

CREATE OR REPLACE VIEW PURCHASE_PROFIT AS
SELECT P.PURCHASE_ID AS PURCHASE_ID,
        PUI.PRODUCT_ID as PRODUCT_ID,
        PUI.VENUE_ID as VENUE_ID,
        P.COUNTRY AS COUNTRY,
        PUI.PURCHASE_COUNT AS PURCHASE_QUANTITY,
        (COST_PER_UNIT_EUR*(1 + APPLICABLE_TAX_PERC )) as COST_PER_UNIT_EUR_VAT,
        (BASEPRICE)*(COST_PER_UNIT_EUR/COST_PER_UNIT)AS PRODUCT_PRICE_EUR
FROM PURCHASE_ITEM AS PUI
JOIN ITEM AS I
ON PUI.PRODUCT_ID = I.PRODUCT_ID
JOIN PURCHASE AS P
ON PUI.VENUE_ID = P.VENUE_ID
WHERE COST_PER_UNIT IS NOT NULL 
AND COST_PER_UNIT_EUR IS NOT NULL 
AND PURCHASE_COUNT IS NOT NULL 

---PROFITABILITY FOR EACH PURCHASE

CREATE OR REPLACE VIEW TOTAL_PROFITABILITY_BY_PURCHASE AS 
SELECT PURCHASE_ID, 
PRODUCT_ID, 
VENUE_ID, 
COUNTRY, 
SUM(PRODUCT_PRICE_EUR)*SUM(PURCHASE_QUANTITY)AS TOTAL_REVENUE,
(SUM(PRODUCT_PRICE_EUR)*SUM(PURCHASE_QUANTITY))-SUM(COST_PER_UNIT_EUR_VAT) AS TOTAL_PROFIT, 
((SUM(PRODUCT_PRICE_EUR)*SUM(PURCHASE_QUANTITY))-SUM(COST_PER_UNIT_EUR_VAT))*100/(SUM(PRODUCT_PRICE_EUR)*SUM(PURCHASE_QUANTITY))AS TOTAL_MARGIN 
FROM PURCHASE_PROFIT
GROUP BY PURCHASE_ID 
ORDER BY TOTAL_MARGIN

 


--REVENUE=PRODUCT_PRICE*PRODUCT_QUANTITY
--PROFIT=REVENUE-TOTAL_COSTS
--MARGIN=PROFIT/REVENUE
--AOV=TOTAL_REVENUE/ TOTAL PRODUCT_QUANTITY  
 

--TOP 10 VENUES
CREATE OR REPLACE VIEW PRODUCT_PROFIT_VENUES AS 
SELECT PUI.PRODUCT_ID as PRODUCT_ID,
	PUI.VENUE_ID as VENUE_ID,
    P.COUNTRY AS COUNTRY, 
    PURCHASE_COUNT as PURCHASE_QUANTITY,
    PUI.PURCHASE_ID as PURCHASE_ID
   (COST_PER_UNIT_EUR*(1 + APPLICABLE_TAX_PERC )) as COST_PER_UNIT_EUR_VAT,
   (BASEPRICE)*(COST_PER_UNIT_EUR/COST_PER_UNIT) AS PRODUCT_PRICE_EUR
FROM PURCHASE_ITEM AS PUI
JOIN ITEM AS I
    ON PUI.PRODUCT_ID = I.PRODUCT_ID
JOIN PURCHASE AS P
	ON PUI.VENUE_ID = P.VENUE_ID
WHERE COST_PER_UNIT_EUR IS NOT NULL 
AND PURCHASE_COUNT IS NOT NULL 
AND BASEPRICE IS NOT NULL
GROUP BY VENUE_ID


CREATE OR REPLACE VIEW TOTAL_PROFIT_EUR_VENUES AS
SELECT PURCHASE_ID,
        PRODUCT_ID,
        VENUE_ID,
        AVG(PURCHASE_QUANTITY) AS AVG_PURCHASE_SIZE
        SUM(PRODUCT_PRICE_EUR)*SUM(PURCHASE_QUANTITY) AS TOTAL_PRODUCT_REVENUE,
        (SUM(PRODUCT_PRICE_EUR)*SUM(PURCHASE_QUANTITY))-SUM(COST_PER_UNIT_EUR_VAT) AS TOTAL_PROFIT,
       ((SUM(PRODUCT_PRICE_EUR)*SUM(PURCHASE_QUANTITY))-SUM(COST_PER_UNIT_EUR_VAT))*100/(SUM(PRODUCT_PRICE_EUR)*SUM(PURCHASE_QUANTITY))AS TOTAL_MARGIN
FROM PRODUCT_PROFIT_VENUES
GRoup by VENUE_ID
ORDER BY TOTAL_MARGIN DESC 



select VENUE_ID, AVG_PURCHASE_SIZE, TOTAL_MARGIN 
from TOTAL_PROFIT_EUR_VENUES
group by VENUE_ID
order by TOTAL_MARGIN desc LIMIT 10


--TOP 5 COUNTRIES
CREATE OR REPLACE VIEW PRODUCT_PROFIT_COUNTRY AS 
SELECT PUI.PRODUCT_ID as PRODUCT_ID,
	PUI.VENUE_ID as VENUE_ID,
    P.COUNTRY AS COUNTRY, 
     P.TIME_DELIVERED AS TIME_DELIVERED,
    PURCHASE_COUNT as PURCHASE_QUANTITY,
    PUI.PURCHASE_ID as PURCHASE_ID
    (COST_PER_UNIT_EUR*(1 + APPLICABLE_TAX_PERC )) as COST_PER_UNIT_EUR_VAT,
   (BASEPRICE)*(COST_PER_UNIT_EUR/COST_PER_UNIT) AS PRODUCT_PRICE_EUR
FROM PURCHASE_ITEM AS PUI
JOIN ITEM AS I
    ON PUI.PRODUCT_ID = I.PRODUCT_ID
JOIN PURCHASE AS P
	ON PUI.VENUE_ID = P.VENUE_ID
WHERE COST_PER_UNIT_EUR IS NOT NULL 
AND PURCHASE_COUNT IS NOT NULL 
AND BASEPRICE IS NOT NULL
GROUP BY COUNTRY

CREATE OR REPLACE VIEW TOTAL_PROFIT_EUR_COUNTRY AS
SELECT PURCHASE_ID,
        PRODUCT_ID,
        VENUE_ID,
        COUNTRY,
        TIME_DELIVERED,
        AVG(PRODUCT_PRICE_EUR) AS AVG_ORDER_VALUE
        AVG(PURCHASE_QUANTITY) AS AVG_PURCHASE_SIZE
        (SUM(PRODUCT_PRICE_EUR)*SUM(PURCHASE_QUANTITY))/SUM(PURCHASE_QUANTITY) AS AOV
FROM PRODUCT_PROFIT_COUNTRY
GRoup by COUNTRY

--by avg order size
SELECT COUNTRY , AVG_PURCHASE_SIZE 
FROM TOTAL_PROFIT_EUR_COUNTRY
GROUP BY COUNTRY
ORDER BY AVG_PURCHASE_SIZE desc Limit 5

--by avg order value
SELECT COUNTRY , AVG_ORDER_VALUE
FROM TOTAL_PROFIT_EUR_COUNTRY
GROUP BY COUNTRY
ORDER BY AVG_ORDER_VALUE desc Limit 5

--by AOV
SELECT COUNTRY ,TIME_DELIVERED, AOV
FROM TOTAL_PROFIT_EUR_COUNTRY
GROUP BY COUNTRY 
ORDER BY AOV desc Limit 5
